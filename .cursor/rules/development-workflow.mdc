# Development Workflow Standards

## Development Server

- **Dev server runs on port 3000 in background** - no need to start it yourself
- Focus on implementation rather than server management

## Git Operations

- **NEVER make git commands** unless explicitly instructed
- Only execute git operations once unless told otherwise
- This includes:
  - `git add`
  - `git commit`
  - `git push`
  - `git pull`
  - Any other git operations

## Documentation Creation

- **NEVER proactively create documentation files** (*.md)
- Only create documentation when explicitly requested
- This includes:
  - README files
  - API documentation
  - Architecture documents
  - Any markdown files

## Testing and Linting Commands

- **NEVER call tools directly with `npx`**
- Always use npm scripts defined in package.json
- Forbidden: `npx playwright`, `npx eslint`
- Correct: `npm run test`, `npm run lint`

## Playwright Testing

- **NEVER use `--headed` or `--debug` flags**
- Always run tests in headless mode (default)
- Using headed mode causes problems in the environment
- Use the playwright MCP tool for DOM checking and temporary screenshots for visual debugging

## Development Commands

### Frequent Use
- `npm run quickfix` - Run frequently to spot issues early and fix them as you go (runs `eslint`, `tsc`, and `prettier`)
- `npm run test` - Use to ensure everything's working during development
- `npm run screenshots` - Maintain the test suite to ensure UI works after implementing new features

### End of Major Work
- `npm run test:build` - Run at the end of really big jobs to check the build is working

### Visual Testing
- Create scenarios in `screenshots.spec.ts` for visual checks
- Use the playwright MCP tool for interactive testing and DOM inspection

## External Tools

- **Use `context7` MCP tool frequently** for any library that might be newly updated or unfamiliar
- This provides up-to-date documentation and examples